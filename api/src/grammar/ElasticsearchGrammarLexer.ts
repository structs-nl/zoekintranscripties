// Generated from src/grammar/ElasticsearchGrammar.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN';
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator';
import { NotNull } from 'antlr4ts/Decorators';
import { Override } from 'antlr4ts/Decorators';
import { RuleContext } from 'antlr4ts/RuleContext';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';

import * as Utils from 'antlr4ts/misc/Utils';

export class ElasticsearchGrammarLexer extends Lexer {
  public static readonly GT = 1;
  public static readonly GTE = 2;
  public static readonly LT = 3;
  public static readonly LTE = 4;
  public static readonly LPAREN = 5;
  public static readonly RPAREN = 6;
  public static readonly LBRACK = 7;
  public static readonly RBRACK = 8;
  public static readonly COLON = 9;
  public static readonly PLUS = 10;
  public static readonly MINUS = 11;
  public static readonly STAR = 12;
  public static readonly QMARK = 13;
  public static readonly LCURLY = 14;
  public static readonly RCURLY = 15;
  public static readonly CARAT = 16;
  public static readonly TILDE = 17;
  public static readonly DQUOTE = 18;
  public static readonly SQUOTE = 19;
  public static readonly TO = 20;
  public static readonly AND = 21;
  public static readonly OR = 22;
  public static readonly NOT = 23;
  public static readonly WS = 24;
  public static readonly NUMBER = 25;
  public static readonly DATE_TOKEN = 26;
  public static readonly TERM_NORMAL = 27;
  public static readonly TERM_TRUNCATED = 28;
  public static readonly PHRASE = 29;
  public static readonly PHRASE_ANYTHING = 30;

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = [
    'DEFAULT_TOKEN_CHANNEL',
    'HIDDEN',
  ];

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE'];

  public static readonly ruleNames: string[] = [
    'GT',
    'GTE',
    'LT',
    'LTE',
    'LPAREN',
    'RPAREN',
    'LBRACK',
    'RBRACK',
    'COLON',
    'PLUS',
    'MINUS',
    'STAR',
    'QMARK',
    'VBAR',
    'AMPER',
    'LCURLY',
    'RCURLY',
    'CARAT',
    'TILDE',
    'DQUOTE',
    'SQUOTE',
    'TO',
    'AND',
    'OR',
    'NOT',
    'WS',
    'INT',
    'ESC_CHAR',
    'TERM_START_CHAR',
    'TERM_CHAR',
    'NUMBER',
    'DATE_TOKEN',
    'TERM_NORMAL',
    'TERM_TRUNCATED',
    'PHRASE',
    'PHRASE_ANYTHING',
  ];

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "'>'",
    "'>='",
    "'<'",
    "'<='",
    "'('",
    "')'",
    "'['",
    "']'",
    "':'",
    "'+'",
    undefined,
    "'*'",
    undefined,
    "'{'",
    "'}'",
    undefined,
    undefined,
    "'\"'",
    "'''",
    "'TO'",
  ];
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    'GT',
    'GTE',
    'LT',
    'LTE',
    'LPAREN',
    'RPAREN',
    'LBRACK',
    'RBRACK',
    'COLON',
    'PLUS',
    'MINUS',
    'STAR',
    'QMARK',
    'LCURLY',
    'RCURLY',
    'CARAT',
    'TILDE',
    'DQUOTE',
    'SQUOTE',
    'TO',
    'AND',
    'OR',
    'NOT',
    'WS',
    'NUMBER',
    'DATE_TOKEN',
    'TERM_NORMAL',
    'TERM_TRUNCATED',
    'PHRASE',
    'PHRASE_ANYTHING',
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    ElasticsearchGrammarLexer._LITERAL_NAMES,
    ElasticsearchGrammarLexer._SYMBOLIC_NAMES,
    []
  );

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return ElasticsearchGrammarLexer.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(ElasticsearchGrammarLexer._ATN, this);
  }

  // @Override
  public get grammarFileName(): string {
    return 'ElasticsearchGrammar.g4';
  }

  // @Override
  public get ruleNames(): string[] {
    return ElasticsearchGrammarLexer.ruleNames;
  }

  // @Override
  public get serializedATN(): string {
    return ElasticsearchGrammarLexer._serializedATN;
  }

  // @Override
  public get channelNames(): string[] {
    return ElasticsearchGrammarLexer.channelNames;
  }

  // @Override
  public get modeNames(): string[] {
    return ElasticsearchGrammarLexer.modeNames;
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02 \u012B\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t' +
    '\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t' +
    '"\x04#\t#\x04$\t$\x04%\t%\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03' +
    '\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03' +
    '\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03' +
    '\x0E\x06\x0Eg\n\x0E\r\x0E\x0E\x0Eh\x03\x0F\x03\x0F\x03\x10\x03\x10\x03' +
    '\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x06\x13u\n\x13\r\x13\x0E' +
    '\x13v\x03\x13\x03\x13\x06\x13{\n\x13\r\x13\x0E\x13|\x05\x13\x7F\n\x13' +
    '\x05\x13\x81\n\x13\x03\x14\x03\x14\x06\x14\x85\n\x14\r\x14\x0E\x14\x86' +
    '\x03\x14\x03\x14\x06\x14\x8B\n\x14\r\x14\x0E\x14\x8C\x05\x14\x8F\n\x14' +
    '\x05\x14\x91\n\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03' +
    '\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x05\x18\x9F\n\x18\x05\x18' +
    '\xA1\n\x18\x03\x19\x03\x19\x03\x19\x03\x19\x05\x19\xA7\n\x19\x05\x19\xA9' +
    '\n\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C' +
    '\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x05\x1E\xB8\n\x1E\x03\x1F\x03' +
    '\x1F\x05\x1F\xBC\n\x1F\x03 \x06 \xBF\n \r \x0E \xC0\x03 \x03 \x06 \xC5' +
    '\n \r \x0E \xC6\x05 \xC9\n \x03!\x03!\x05!\xCD\n!\x03!\x03!\x03!\x05!' +
    '\xD2\n!\x03!\x03!\x03!\x03!\x03!\x03!\x05!\xDA\n!\x03"\x03"\x07"\xDE' +
    '\n"\f"\x0E"\xE1\v"\x03#\x03#\x05#\xE5\n#\x03#\x06#\xE8\n#\r#\x0E#' +
    '\xE9\x03#\x03#\x05#\xEE\n#\x06#\xF0\n#\r#\x0E#\xF1\x03#\x07#\xF5\n#\f' +
    '#\x0E#\xF8\v#\x03#\x03#\x07#\xFC\n#\f#\x0E#\xFF\v#\x03#\x03#\x05#\u0103' +
    '\n#\x06#\u0105\n#\r#\x0E#\u0106\x03#\x07#\u010A\n#\f#\x0E#\u010D\v#\x03' +
    '#\x03#\x05#\u0111\n#\x03#\x06#\u0114\n#\r#\x0E#\u0115\x05#\u0118\n#\x03' +
    '$\x03$\x03$\x06$\u011D\n$\r$\x0E$\u011E\x03$\x03$\x03%\x03%\x03%\x06%' +
    '\u0126\n%\r%\x0E%\u0127\x03%\x03%\x02\x02\x02&\x03\x02\x03\x05\x02\x04' +
    '\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v' +
    '\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x02\x1F\x02\x02!' +
    "\x02\x10#\x02\x11%\x02\x12'\x02\x13)\x02\x14+\x02\x15-\x02\x16/\x02\x17" +
    '1\x02\x183\x02\x195\x02\x1A7\x02\x029\x02\x02;\x02\x02=\x02\x02?\x02\x1B' +
    'A\x02\x1CC\x02\x1DE\x02\x1EG\x02\x1FI\x02 \x03\x02\x0E\x04\x02##//\x04' +
    '\x02CCcc\x04\x02PPpp\x04\x02FFff\x04\x02QQqq\x04\x02TTtt\x04\x02VVvv\x06' +
    '\x02\v\f\x0F\x0F""\u3002\u3002\r\x02\v\f\x0F\x0F"$)-//<<AA]`}}\x7F' +
    '\x80\u3002\u3002\x04\x02--//\x06\x02$$,,AA^^\x04\x02$$^^\x02\u014B\x02' +
    '\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02' +
    '\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F' +
    '\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15' +
    '\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B' +
    '\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02' +
    "\x02\x02\x02'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02" +
    '\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03' +
    '\x02\x02\x02\x025\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02' +
    '\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02' +
    'I\x03\x02\x02\x02\x03K\x03\x02\x02\x02\x05M\x03\x02\x02\x02\x07P\x03\x02' +
    '\x02\x02\tR\x03\x02\x02\x02\vU\x03\x02\x02\x02\rW\x03\x02\x02\x02\x0F' +
    'Y\x03\x02\x02\x02\x11[\x03\x02\x02\x02\x13]\x03\x02\x02\x02\x15_\x03\x02' +
    '\x02\x02\x17a\x03\x02\x02\x02\x19c\x03\x02\x02\x02\x1Bf\x03\x02\x02\x02' +
    '\x1Dj\x03\x02\x02\x02\x1Fl\x03\x02\x02\x02!n\x03\x02\x02\x02#p\x03\x02' +
    "\x02\x02%r\x03\x02\x02\x02'\x82\x03\x02\x02\x02)\x92\x03\x02\x02\x02" +
    '+\x94\x03\x02\x02\x02-\x96\x03\x02\x02\x02/\xA0\x03\x02\x02\x021\xA8\x03' +
    '\x02\x02\x023\xAA\x03\x02\x02\x025\xAE\x03\x02\x02\x027\xB0\x03\x02\x02' +
    '\x029\xB2\x03\x02\x02\x02;\xB7\x03\x02\x02\x02=\xBB\x03\x02\x02\x02?\xBE' +
    '\x03\x02\x02\x02A\xCA\x03\x02\x02\x02C\xDB\x03\x02\x02\x02E\u0117\x03' +
    '\x02\x02\x02G\u0119\x03\x02\x02\x02I\u0122\x03\x02\x02\x02KL\x07@\x02' +
    '\x02L\x04\x03\x02\x02\x02MN\x07@\x02\x02NO\x07?\x02\x02O\x06\x03\x02\x02' +
    '\x02PQ\x07>\x02\x02Q\b\x03\x02\x02\x02RS\x07>\x02\x02ST\x07?\x02\x02T' +
    '\n\x03\x02\x02\x02UV\x07*\x02\x02V\f\x03\x02\x02\x02WX\x07+\x02\x02X\x0E' +
    '\x03\x02\x02\x02YZ\x07]\x02\x02Z\x10\x03\x02\x02\x02[\\\x07_\x02\x02\\' +
    '\x12\x03\x02\x02\x02]^\x07<\x02\x02^\x14\x03\x02\x02\x02_`\x07-\x02\x02' +
    '`\x16\x03\x02\x02\x02ab\t\x02\x02\x02b\x18\x03\x02\x02\x02cd\x07,\x02' +
    '\x02d\x1A\x03\x02\x02\x02eg\x07A\x02\x02fe\x03\x02\x02\x02gh\x03\x02\x02' +
    '\x02hf\x03\x02\x02\x02hi\x03\x02\x02\x02i\x1C\x03\x02\x02\x02jk\x07~\x02' +
    '\x02k\x1E\x03\x02\x02\x02lm\x07(\x02\x02m \x03\x02\x02\x02no\x07}\x02' +
    '\x02o"\x03\x02\x02\x02pq\x07\x7F\x02\x02q$\x03\x02\x02\x02r\x80\x07`' +
    '\x02\x02su\x057\x1C\x02ts\x03\x02\x02\x02uv\x03\x02\x02\x02vt\x03\x02' +
    '\x02\x02vw\x03\x02\x02\x02w~\x03\x02\x02\x02xz\x070\x02\x02y{\x057\x1C' +
    '\x02zy\x03\x02\x02\x02{|\x03\x02\x02\x02|z\x03\x02\x02\x02|}\x03\x02\x02' +
    '\x02}\x7F\x03\x02\x02\x02~x\x03\x02\x02\x02~\x7F\x03\x02\x02\x02\x7F\x81' +
    '\x03\x02\x02\x02\x80t\x03\x02\x02\x02\x80\x81\x03\x02\x02\x02\x81&\x03' +
    '\x02\x02\x02\x82\x90\x07\x80\x02\x02\x83\x85\x057\x1C\x02\x84\x83\x03' +
    '\x02\x02\x02\x85\x86\x03\x02\x02\x02\x86\x84\x03\x02\x02\x02\x86\x87\x03' +
    '\x02\x02\x02\x87\x8E\x03\x02\x02\x02\x88\x8A\x070\x02\x02\x89\x8B\x05' +
    '7\x1C\x02\x8A\x89\x03\x02\x02\x02\x8B\x8C\x03\x02\x02\x02\x8C\x8A\x03' +
    '\x02\x02\x02\x8C\x8D\x03\x02\x02\x02\x8D\x8F\x03\x02\x02\x02\x8E\x88\x03' +
    '\x02\x02\x02\x8E\x8F\x03\x02\x02\x02\x8F\x91\x03\x02\x02\x02\x90\x84\x03' +
    '\x02\x02\x02\x90\x91\x03\x02\x02\x02\x91(\x03\x02\x02\x02\x92\x93\x07' +
    '$\x02\x02\x93*\x03\x02\x02\x02\x94\x95\x07)\x02\x02\x95,\x03\x02\x02\x02' +
    '\x96\x97\x07V\x02\x02\x97\x98\x07Q\x02\x02\x98.\x03\x02\x02\x02\x99\x9A' +
    '\t\x03\x02\x02\x9A\x9B\t\x04\x02\x02\x9B\xA1\t\x05\x02\x02\x9C\x9E\x05' +
    '\x1F\x10\x02\x9D\x9F\x05\x1F\x10\x02\x9E\x9D\x03\x02\x02\x02\x9E\x9F\x03' +
    '\x02\x02\x02\x9F\xA1\x03\x02\x02\x02\xA0\x99\x03\x02\x02\x02\xA0\x9C\x03' +
    '\x02\x02\x02\xA10\x03\x02\x02\x02\xA2\xA3\t\x06\x02\x02\xA3\xA9\t\x07' +
    '\x02\x02\xA4\xA6\x05\x1D\x0F\x02\xA5\xA7\x05\x1D\x0F\x02\xA6\xA5\x03\x02' +
    '\x02\x02\xA6\xA7\x03\x02\x02\x02\xA7\xA9\x03\x02\x02\x02\xA8\xA2\x03\x02' +
    '\x02\x02\xA8\xA4\x03\x02\x02\x02\xA92\x03\x02\x02\x02\xAA\xAB\t\x04\x02' +
    '\x02\xAB\xAC\t\x06\x02\x02\xAC\xAD\t\b\x02\x02\xAD4\x03\x02\x02\x02\xAE' +
    '\xAF\t\t\x02\x02\xAF6\x03\x02\x02\x02\xB0\xB1\x042;\x02\xB18\x03\x02\x02' +
    '\x02\xB2\xB3\x07^\x02\x02\xB3\xB4\v\x02\x02\x02\xB4:\x03\x02\x02\x02\xB5' +
    '\xB8\n\n\x02\x02\xB6\xB8\x059\x1D\x02\xB7\xB5\x03\x02\x02\x02\xB7\xB6' +
    '\x03\x02\x02\x02\xB8<\x03\x02\x02\x02\xB9\xBC\x05;\x1E\x02\xBA\xBC\t\v' +
    '\x02\x02\xBB\xB9\x03\x02\x02\x02\xBB\xBA\x03\x02\x02\x02\xBC>\x03\x02' +
    '\x02\x02\xBD\xBF\x057\x1C\x02\xBE\xBD\x03\x02\x02\x02\xBF\xC0\x03\x02' +
    '\x02\x02\xC0\xBE\x03\x02\x02\x02\xC0\xC1\x03\x02\x02\x02\xC1\xC8\x03\x02' +
    '\x02\x02\xC2\xC4\x070\x02\x02\xC3\xC5\x057\x1C\x02\xC4\xC3\x03\x02\x02' +
    '\x02\xC5\xC6\x03\x02\x02\x02\xC6\xC4\x03\x02\x02\x02\xC6\xC7\x03\x02\x02' +
    '\x02\xC7\xC9\x03\x02\x02\x02\xC8\xC2\x03\x02\x02\x02\xC8\xC9\x03\x02\x02' +
    '\x02\xC9@\x03\x02\x02\x02\xCA\xCC\x057\x1C\x02\xCB\xCD\x057\x1C\x02\xCC' +
    '\xCB\x03\x02\x02\x02\xCC\xCD\x03\x02\x02\x02\xCD\xCE\x03\x02\x02\x02\xCE' +
    '\xCF\x04/1\x02\xCF\xD1\x057\x1C\x02\xD0\xD2\x057\x1C\x02\xD1\xD0\x03\x02' +
    '\x02\x02\xD1\xD2\x03\x02\x02\x02\xD2\xD3\x03\x02\x02\x02\xD3\xD4\x04/' +
    '1\x02\xD4\xD5\x057\x1C\x02\xD5\xD9\x057\x1C\x02\xD6\xD7\x057\x1C\x02\xD7' +
    '\xD8\x057\x1C\x02\xD8\xDA\x03\x02\x02\x02\xD9\xD6\x03\x02\x02\x02\xD9' +
    '\xDA\x03\x02\x02\x02\xDAB\x03\x02\x02\x02\xDB\xDF\x05;\x1E\x02\xDC\xDE' +
    '\x05=\x1F\x02\xDD\xDC\x03\x02\x02\x02\xDE\xE1\x03\x02\x02\x02\xDF\xDD' +
    '\x03\x02\x02\x02\xDF\xE0\x03\x02\x02\x02\xE0D\x03\x02\x02\x02\xE1\xDF' +
    '\x03\x02\x02\x02\xE2\xE5\x05\x19\r\x02\xE3\xE5\x05\x1B\x0E\x02\xE4\xE2' +
    '\x03\x02\x02\x02\xE4\xE3\x03\x02\x02\x02\xE5\xEF\x03\x02\x02\x02\xE6\xE8' +
    '\x05=\x1F\x02\xE7\xE6\x03\x02\x02\x02\xE8\xE9\x03\x02\x02\x02\xE9\xE7' +
    '\x03\x02\x02\x02\xE9\xEA\x03\x02\x02\x02\xEA\xED\x03\x02\x02\x02\xEB\xEE' +
    '\x05\x1B\x0E\x02\xEC\xEE\x05\x19\r\x02\xED\xEB\x03\x02\x02\x02\xED\xEC' +
    '\x03\x02\x02\x02\xEE\xF0\x03\x02\x02\x02\xEF\xE7\x03\x02\x02\x02\xF0\xF1' +
    '\x03\x02\x02\x02\xF1\xEF\x03\x02\x02\x02\xF1\xF2\x03\x02\x02\x02\xF2\xF6' +
    '\x03\x02\x02\x02\xF3\xF5\x05=\x1F\x02\xF4\xF3\x03\x02\x02\x02\xF5\xF8' +
    '\x03\x02\x02\x02\xF6\xF4\x03\x02\x02\x02\xF6\xF7\x03\x02\x02\x02\xF7\u0118' +
    '\x03\x02\x02\x02\xF8\xF6\x03\x02\x02\x02\xF9\u0104\x05;\x1E\x02\xFA\xFC' +
    '\x05=\x1F\x02\xFB\xFA\x03\x02\x02\x02\xFC\xFF\x03\x02\x02\x02\xFD\xFB' +
    '\x03\x02\x02\x02\xFD\xFE\x03\x02\x02\x02\xFE\u0102\x03\x02\x02\x02\xFF' +
    '\xFD\x03\x02\x02\x02\u0100\u0103\x05\x1B\x0E\x02\u0101\u0103\x05\x19\r' +
    '\x02\u0102\u0100\x03\x02\x02\x02\u0102\u0101\x03\x02\x02\x02\u0103\u0105' +
    '\x03\x02\x02\x02\u0104\xFD\x03\x02\x02\x02\u0105\u0106\x03\x02\x02\x02' +
    '\u0106\u0104\x03\x02\x02\x02\u0106\u0107\x03\x02\x02\x02\u0107\u010B\x03' +
    '\x02\x02\x02\u0108\u010A\x05=\x1F\x02\u0109\u0108\x03\x02\x02\x02\u010A' +
    '\u010D\x03\x02\x02\x02\u010B\u0109\x03\x02\x02\x02\u010B\u010C\x03\x02' +
    '\x02\x02\u010C\u0118\x03\x02\x02\x02\u010D\u010B\x03\x02\x02\x02\u010E' +
    '\u0111\x05\x19\r\x02\u010F\u0111\x05\x1B\x0E\x02\u0110\u010E\x03\x02\x02' +
    '\x02\u0110\u010F\x03\x02\x02\x02\u0111\u0113\x03\x02\x02\x02\u0112\u0114' +
    '\x05=\x1F\x02\u0113\u0112\x03\x02\x02\x02\u0114\u0115\x03\x02\x02\x02' +
    '\u0115\u0113\x03\x02\x02\x02\u0115\u0116\x03\x02\x02\x02\u0116\u0118\x03' +
    '\x02\x02\x02\u0117\xE4\x03\x02\x02\x02\u0117\xF9\x03\x02\x02\x02\u0117' +
    '\u0110\x03\x02\x02\x02\u0118F\x03\x02\x02\x02\u0119\u011C\x05)\x15\x02' +
    '\u011A\u011D\x059\x1D\x02\u011B\u011D\n\f\x02\x02\u011C\u011A\x03\x02' +
    '\x02\x02\u011C\u011B\x03\x02\x02\x02\u011D\u011E\x03\x02\x02\x02\u011E' +
    '\u011C\x03\x02\x02\x02\u011E\u011F\x03\x02\x02\x02\u011F\u0120\x03\x02' +
    '\x02\x02\u0120\u0121\x05)\x15\x02\u0121H\x03\x02\x02\x02\u0122\u0125\x05' +
    ')\x15\x02\u0123\u0126\x059\x1D\x02\u0124\u0126\n\r\x02\x02\u0125\u0123' +
    '\x03\x02\x02\x02\u0125\u0124\x03\x02\x02\x02\u0126\u0127\x03\x02\x02\x02' +
    '\u0127\u0125\x03\x02\x02\x02\u0127\u0128\x03\x02\x02\x02\u0128\u0129\x03' +
    '\x02\x02\x02\u0129\u012A\x05)\x15\x02\u012AJ\x03\x02\x02\x02)\x02hv|~' +
    '\x80\x86\x8C\x8E\x90\x9E\xA0\xA6\xA8\xB7\xBB\xC0\xC6\xC8\xCC\xD1\xD9\xDF' +
    '\xE4\xE9\xED\xF1\xF6\xFD\u0102\u0106\u010B\u0110\u0115\u0117\u011C\u011E' +
    '\u0125\u0127\x02';
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!ElasticsearchGrammarLexer.__ATN) {
      ElasticsearchGrammarLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(ElasticsearchGrammarLexer._serializedATN)
      );
    }

    return ElasticsearchGrammarLexer.__ATN;
  }
}
